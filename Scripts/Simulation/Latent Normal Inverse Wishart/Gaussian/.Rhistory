source("categorical.R")
setwd("C:/Users/LENOVO/Desktop/GraphicalModels-BayesStat/Scripts/Simulation/Multinomial Hyper Dirichlet")
source("categorical.R")
trueGraphs = list()
encodedList = c()
for(i in 1:20){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
source("categorical.R")
source("categorical.R")
source("categorical.R")
source("categorical.R")
trueGraphs = list()
encodedList = c()
for(i in 1:20){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
View(trueGraphs)
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateCategoricalDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6, p = 0.3)
initialCandidate = matrix(0,6,6)
chain = MetropolisHastingsCategorical(data[[2]],initialCandidate,1000,500,1,prior = "Binomial",p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
for(trueGraph in trueGraphs){
data = generateCategoricalDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6, p = 0.3)
initialCandidate = matrix(0,6,6)
chain = MetropolisHastingsCategorical(data[[2]],initialCandidate,1000,500,1,prior = "Binomial",p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
source("categorical.R")
for(trueGraph in trueGraphs){
data = generateCategoricalDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6, p = 0.3)
initialCandidate = matrix(0,6,6)
chain = MetropolisHastingsCategorical(data[[2]],initialCandidate,1000,500,1,prior = "Binomial",p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
install.packages("gRbase")
install.packages("pcalg")
library(extraDistr)
library(igraph)
library(matrixcalc)
library(Rlab)
library(BDgraph)
library(mvtnorm)
library(plyr)
library(dplyr)
#library(pcalg)
library(gRbase)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("graph", "RBGL", "Rgraphviz"))
install.packages("gRain", dependencies = TRUE)
source("categorical.R")
trueGraphs = list()
encodedList = c()
for(i in 1:20){
while(TRUE){
graph = erdos.renyi.game(6,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateCategoricalDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = 6, p = 0.3)
initialCandidate = matrix(0,6,6)
chain = MetropolisHastingsCategorical(data[[2]],initialCandidate,1000,500,1,prior = "Binomial",p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
View(mpg)
library(pcalg)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
map_distances = c()
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
View(chain)
lapply(chain, toString)
prova = unlist(lapply(chain, toString))
prova
count(prova)
prova = lapply(chain, toString)
View(prova)
View(chain)
count(prova)
count(unlist(prova))
lapply(unlist(prova), toString)
prova1 = lapply(unlist(prova), toString)
View(prova1)
library(dplyr)
library(plyr)
uniqueValues = count(unlist(lapply(chain, toString)))
prova2 = unique(unlist(lapply(chain, toString)))
View(prova)
prova2$freq
df3 <- structure(list(Var1 = structure(1:15, .Label = c("4", "5", "23",
"34", "43", "54", "56", "65", "67", "324", "435", "453", "456",
"567", "657"), class = "factor"), Var2 = c(2L, 1L, 2L, 2L, 1L,
1L, 2L, 1L, 2L, 1L, 3L, 1L, 1L, 1L, 1L)), class = "data.frame", row.names = c(NA,
-15L))
View(df3)
col = df3$Var2
count(df3$Var2)
plyr::count(df3$Car2)
plyr::count(df3$Var2)
uniqueValues = plyr::count(unlist(lapply(chain, toString)))
View(uniqueValues)
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
source("categorical.R")
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
setwd("C:/Users/LENOVO/Desktop/GraphicalModels-BayesStat/Scripts/Simulation/Latent Normal Inverse Wishart/Gaussian")
source("gaussian.R")
number_of_trial = 5
number_of_node = 6
trueGraphs = list()
encodedList = c()
for(i in 1:number_of_trial){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = number_of_node)
initialCandidate = matrix(0,number_of_node,number_of_node)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
# Source useful scripts
source("gaussian.R")
# Generate 20 decomposable graphs that will be used as the true graph to generate 20 different datasets.
number_of_trial = 5
number_of_node = 6
trueGraphs = list()
encodedList = c()
for(i in 1:number_of_trial){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = number_of_node)
initialCandidate = matrix(0,number_of_node,number_of_node)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
number_of_trial = 20
number_of_node = 6
trueGraphs = list()
encodedList = c()
for(i in 1:number_of_trial){
while(TRUE){
graph = erdos.renyi.game(number_of_node,0.3,type="gnp",directed = FALSE)
newGraph = as_adjacency_matrix(graph, sparse = 0)
encoded = encodeGraph(newGraph)
if(isDecomposable(newGraph) & !encoded %in% encodedList){
trueGraphs[[i]] = newGraph
encodedList = c(encodedList,encoded)
break
}
}
}
mpgs = list()
maps = list()
mpg_distances = c()
map_distances = c()
count = 1
for(trueGraph in trueGraphs){
data = generateGaussianDataFromGraph(adjacencyMatrix = trueGraph, n.obs = 10000, n.variables = number_of_node)
initialCandidate = matrix(0,number_of_node,number_of_node)
print(paste("graph ", count))
chain = MetropolisHastingsGaussian(data[[2]], initialCandidate, 200, 50, 1, prior = "Binomial", p=0.3)
# Median Probability Graph
mpg = medianProbabilityGraph(chain)
mpgs[[count]] = mpg
mpg_distances = c(mpg_distances,computeSHD(trueGraph,mpg))
# Maximum a Posteriori Graph
map = maximumPosterioriGraph(chain)
maps[[count]] = map
map_distances = c(map_distances,computeSHD(trueGraph,map))
# Increase count
count = count + 1
}
x11()
par(mfrow = c(2,1))
barplot(table(mpg_distances),main = "SHD (Median Probability Graphs)", col = rainbow(length(unique(mpg_distances))))
barplot(table(map_distances),main = "SHD (Maximum a Posteriori)", col = rainbow(length(unique(map_distances))))
print(mean(mpg_distances))
print(mean(map_distances))
